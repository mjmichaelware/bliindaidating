import 'package:json_annotation/json_annotation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

part 'user_profile.g.dart'; // Ensure this file is generated by build_runner

@JsonSerializable()
class UserProfile {
  // CORRECT FIX: This tells json_serializable that the Dart field 'userId'
  // should be serialized to/from the JSON key 'id'.
  // This maintains 'userId' in your Dart code for compatibility,
  // while aligning with the 'id' column in your Supabase 'profiles' table.
  @JsonKey(name: 'id') // Maps 'userId' to 'id' in JSON
  final String userId;
  final String email;

  // Phase 1 - Core Identity & Consent
  @JsonKey(name: 'full_legal_name')
  final String? fullLegalName;
  @JsonKey(name: 'display_name')
  final String? displayName;
  @JsonKey(name: 'profile_picture_url')
  final String? profilePictureUrl;
  @JsonKey(name: 'date_of_birth')
  final DateTime? dateOfBirth;
  @JsonKey(name: 'phone_number')
  final String? phoneNumber;
  @JsonKey(name: 'location_zip_code')
  final String? locationZipCode;
  @JsonKey(name: 'gender_identity')
  final String? genderIdentity;
  @JsonKey(name: 'sexual_orientation')
  final String? sexualOrientation;
  @JsonKey(name: 'height_cm')
  final double? heightCm;

  // Phase 2 - Essential Matching Data & KYC Completion
  @JsonKey(name: 'government_id_front_url')
  final String? governmentIdFrontUrl;
  @JsonKey(name: 'government_id_back_url')
  final String? governmentIdBackUrl;
  final String? ethnicity;
  @JsonKey(name: 'languages_spoken')
  final List<String>? languagesSpoken;
  @JsonKey(name: 'desired_occupation')
  final String? desiredOccupation;
  @JsonKey(name: 'education_level')
  final String? educationLevel;
  @JsonKey(name: 'hobbies_and_interests')
  final List<String>? hobbiesAndInterests;
  @JsonKey(name: 'love_languages')
  final List<String>? loveLanguages;
  @JsonKey(name: 'favorite_media')
  final List<String>? favoriteMedia;
  @JsonKey(name: 'marital_status')
  final String? maritalStatus;
  final bool? hasChildren;
  final bool? wantsChildren;
  @JsonKey(name: 'relationship_goals')
  final String? relationshipGoals;
  final List<String>? dealbreakers;

  // Phase 3 - Progressive Profiling
  final String? bio;
  @JsonKey(name: 'looking_for')
  final String? lookingFor;
  @JsonKey(name: 'religion_or_spiritual_beliefs')
  final String? religionOrSpiritualBeliefs;
  @JsonKey(name: 'political_views')
  final String? politicalViews;
  final String? diet;
  @JsonKey(name: 'smoking_habits')
  final String? smokingHabits;
  @JsonKey(name: 'drinking_habits')
  final String? drinkingHabits;
  @JsonKey(name: 'exercise_frequency_or_fitness_level')
  final String? exerciseFrequencyOrFitnessLevel;
  @JsonKey(name: 'sleep_schedule')
  final String? sleepSchedule;
  @JsonKey(name: 'personality_traits')
  final List<String>? personalityTraits;
  @JsonKey(name: 'questionnaire_answers')
  final Map<String, dynamic>? questionnaireAnswers;
  @JsonKey(name: 'personality_assessment_results')
  final Map<String, dynamic>? personalityAssessmentResults;

  @JsonKey(name: 'willing_to_relocate')
  final bool? willingToRelocate;
  @JsonKey(name: 'monogamy_vs_polyamory_preferences')
  final String? monogamyVsPolyamoryPreferences;
  @JsonKey(name: 'astrological_sign')
  final String? astrologicalSign;
  @JsonKey(name: 'attachment_style')
  final String? attachmentStyle;
  @JsonKey(name: 'communication_style')
  final String? communicationStyle;
  @JsonKey(name: 'mental_health_disclosures')
  final String? mentalHealthDisclosures;
  @JsonKey(name: 'pet_ownership')
  final String? petOwnership;
  @JsonKey(name: 'travel_frequency_or_favorite_destinations')
  final String? travelFrequencyOrFavoriteDestinations;
  @JsonKey(name: 'profile_visibility_preferences')
  final Map<String, bool>? profileVisibilityPreferences;
  @JsonKey(name: 'push_notification_preferences')
  final Map<String, bool>? pushNotificationPreferences;

  // Compliance & Onboarding Status
  @JsonKey(name: 'is_phase_1_complete')
  final bool isPhase1Complete;
  @JsonKey(name: 'is_phase_2_complete')
  final bool isPhase2Complete;
  @JsonKey(name: 'agreed_to_terms')
  final bool agreedToTerms;
  @JsonKey(name: 'agreed_to_community_guidelines')
  final bool agreedToCommunityGuidelines;

  // Timestamps
  @JsonKey(name: 'created_at')
  final DateTime? createdAt;
  @JsonKey(name: 'updated_at')
  final DateTime? updatedAt;

  // Deprecated fields (for migration purposes, can be removed after migration)
  @Deprecated('Use fullLegalName instead')
  final String? fullName;
  @Deprecated('Use genderIdentity instead')
  final String? gender;
  @Deprecated('Use locationZipCode instead')
  final String? addressZip;
  @Deprecated('Use hobbiesAndInterests instead')
  final List<String>? interests;
  @Deprecated('Use heightCm instead')
  final double? height;

  UserProfile({
    required this.userId,
    required this.email,
    this.fullLegalName,
    this.displayName,
    this.profilePictureUrl,
    this.dateOfBirth,
    this.phoneNumber,
    this.locationZipCode,
    this.genderIdentity,
    this.sexualOrientation,
    this.heightCm,
    this.governmentIdFrontUrl,
    this.governmentIdBackUrl,
    this.ethnicity,
    this.languagesSpoken,
    this.desiredOccupation,
    this.educationLevel,
    this.hobbiesAndInterests,
    this.loveLanguages,
    this.favoriteMedia,
    this.maritalStatus,
    this.hasChildren,
    this.wantsChildren,
    this.relationshipGoals,
    this.dealbreakers,
    this.bio,
    this.lookingFor,
    this.religionOrSpiritualBeliefs,
    this.politicalViews,
    this.diet,
    this.smokingHabits,
    this.drinkingHabits,
    this.exerciseFrequencyOrFitnessLevel,
    this.sleepSchedule,
    this.personalityTraits,
    this.questionnaireAnswers,
    this.personalityAssessmentResults,
    this.willingToRelocate,
    this.monogamyVsPolyamoryPreferences,
    this.astrologicalSign,
    this.attachmentStyle,
    this.communicationStyle,
    this.mentalHealthDisclosures,
    this.petOwnership,
    this.travelFrequencyOrFavoriteDestinations,
    this.profileVisibilityPreferences,
    this.pushNotificationPreferences,
    this.isPhase1Complete = false,
    this.isPhase2Complete = false,
    this.agreedToTerms = false,
    this.agreedToCommunityGuidelines = false,
    this.createdAt,
    this.updatedAt,
    this.fullName,
    this.gender,
    this.addressZip,
    this.interests,
    this.height,
  });

  factory UserProfile.fromJson(Map<String, dynamic> json) {
    // Manually handle mapping from old to new fields during deserialization
    final String? fullLegalName = json['full_legal_name'] as String? ?? json['full_name'] as String?;
    final String? genderIdentity = json['gender_identity'] as String? ?? json['gender'] as String?;
    final String? locationZipCode = json['location_zip_code'] as String? ?? json['address_zip'] as String?;
    final List<String>? hobbiesAndInterests = (json['hobbies_and_interests'] as List?)?.map((e) => e as String).toList() ??
        (json['interests'] as List?)?.map((e) => e as String).toList();
    final double? heightCm = (json['height_cm'] as num?)?.toDouble() ?? (json['height'] as num?)?.toDouble();

    return _$UserProfileFromJson({
      ...json,
      // Ensure 'id' from the database is used to populate 'userId' through the @JsonKey mapping
      // The generated _$UserProfileFromJson will now correctly read 'id' from the JSON
      // and assign it to the 'userId' field in the Dart object.
      'full_legal_name': fullLegalName,
      'gender_identity': genderIdentity,
      'location_zip_code': locationZipCode,
      'hobbies_and_interests': hobbiesAndInterests,
      'height_cm': heightCm,
    });
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> json = _$UserProfileToJson(this);

    // After the `@JsonKey(name: 'id')` is applied to `userId`,
    // `_$UserProfileToJson(this)` will already put `userId`'s value under the 'id' key.
    // The `user_id` key (from your original `@JsonKey(name: 'user_id')`)
    // is no longer automatically generated.
    // So, this `.remove('user_id')` is technically redundant *if* `user_profile.g.dart` is correctly regenerated,
    // but it's harmless and acts as a safeguard.
    // If your database had a 'user_id' column that you've now removed or changed,
    // this line helps ensure that old, incorrect keys aren't sent.
    json.remove('user_id');

    // Remove deprecated fields from the JSON payload if they are null or match the new field
    if (fullLegalName != null && json.containsKey('full_name') && json['full_name'] == fullLegalName) {
      json.remove('full_name');
    }
    if (genderIdentity != null && json.containsKey('gender') && json['gender'] == genderIdentity) {
      json.remove('gender');
    }
    if (locationZipCode != null && json.containsKey('address_zip') && json['address_zip'] == locationZipCode) {
      json.remove('address_zip');
    }
    if (hobbiesAndInterests != null) {
      json.remove('interests');
    } else if (json.containsKey('interests')) {
      json.remove('interests');
    }
    if (heightCm != null && json.containsKey('height') && json['height'] == heightCm) {
      json.remove('height');
    } else if (json.containsKey('height')) {
      json.remove('height');
    }

    json.remove('location_city');
    json.remove('location_state');

    return json;
  }

  UserProfile copyWith({
    String? userId,
    String? email,
    String? fullLegalName,
    String? displayName,
    String? profilePictureUrl,
    DateTime? dateOfBirth,
    String? phoneNumber,
    String? locationZipCode,
    String? genderIdentity,
    String? sexualOrientation,
    double? heightCm,
    String? governmentIdFrontUrl,
    String? governmentIdBackUrl,
    String? ethnicity,
    List<String>? languagesSpoken,
    String? desiredOccupation,
    String? educationLevel,
    List<String>? hobbiesAndInterests,
    List<String>? loveLanguages,
    List<String>? favoriteMedia,
    String? maritalStatus,
    bool? hasChildren,
    bool? wantsChildren,
    String? relationshipGoals,
    List<String>? dealbreakers,
    String? bio,
    String? lookingFor,
    String? religionOrSpiritualBeliefs,
    String? politicalViews,
    String? diet,
    String? smokingHabits,
    String? drinkingHabits,
    String? exerciseFrequencyOrFitnessLevel,
    String? sleepSchedule,
    List<String>? personalityTraits,
    Map<String, dynamic>? questionnaireAnswers,
    Map<String, dynamic>? personalityAssessmentResults,
    bool? willingToRelocate,
    String? monogamyVsPolyamoryPreferences,
    String? astrologicalSign,
    String? attachmentStyle,
    String? communicationStyle,
    String? mentalHealthDisclosures,
    String? petOwnership,
    String? travelFrequencyOrFavoriteDestinations,
    Map<String, bool>? profileVisibilityPreferences,
    Map<String, bool>? pushNotificationPreferences,
    bool? isPhase1Complete,
    bool? isPhase2Complete,
    bool? agreedToTerms,
    bool? agreedToCommunityGuidelines,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? fullName,
    String? gender,
    String? addressZip,
    List<String>? interests,
    double? height,
  }) {
    return UserProfile(
      userId: userId ?? this.userId,
      email: email ?? this.email,
      fullLegalName: fullLegalName ?? this.fullLegalName,
      displayName: displayName ?? this.displayName,
      profilePictureUrl: profilePictureUrl ?? this.profilePictureUrl,
      dateOfBirth: dateOfBirth ?? this.dateOfBirth,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      locationZipCode: locationZipCode ?? this.locationZipCode,
      genderIdentity: genderIdentity ?? this.genderIdentity,
      sexualOrientation: sexualOrientation ?? this.sexualOrientation,
      heightCm: heightCm ?? this.heightCm,
      governmentIdFrontUrl: governmentIdFrontUrl ?? this.governmentIdFrontUrl,
      governmentIdBackUrl: governmentIdBackUrl ?? this.governmentIdBackUrl,
      ethnicity: ethnicity ?? this.ethnicity,
      languagesSpoken: languagesSpoken ?? this.languagesSpoken,
      desiredOccupation: desiredOccupation ?? this.desiredOccupation,
      educationLevel: educationLevel ?? this.educationLevel,
      hobbiesAndInterests: hobbiesAndInterests ?? this.hobbiesAndInterests,
      loveLanguages: loveLanguages ?? this.loveLanguages,
      favoriteMedia: favoriteMedia ?? this.favoriteMedia,
      maritalStatus: maritalStatus ?? this.maritalStatus,
      hasChildren: hasChildren ?? this.hasChildren,
      wantsChildren: wantsChildren ?? this.wantsChildren,
      relationshipGoals: relationshipGoals ?? this.relationshipGoals,
      dealbreakers: dealbreakers ?? this.dealbreakers,
      bio: bio ?? this.bio,
      lookingFor: lookingFor ?? this.lookingFor,
      religionOrSpiritualBeliefs: religionOrSpiritualBeliefs ?? this.religionOrSpiritualBeliefs,
      politicalViews: politicalViews ?? this.politicalViews,
      diet: diet ?? this.diet,
      smokingHabits: smokingHabits ?? this.smokingHabits,
      drinkingHabits: drinkingHabits ?? this.drinkingHabits,
      exerciseFrequencyOrFitnessLevel: exerciseFrequencyOrFitnessLevel ?? this.exerciseFrequencyOrFitnessLevel,
      sleepSchedule: sleepSchedule ?? this.sleepSchedule,
      personalityTraits: personalityTraits ?? this.personalityTraits,
      questionnaireAnswers: questionnaireAnswers ?? this.questionnaireAnswers,
      personalityAssessmentResults: personalityAssessmentResults ?? this.personalityAssessmentResults,
      willingToRelocate: willingToRelocate ?? this.willingToRelocate,
      monogamyVsPolyamoryPreferences: monogamyVsPolyamoryPreferences ?? this.monogamyVsPolyamoryPreferences,
      astrologicalSign: astrologicalSign ?? this.astrologicalSign,
      attachmentStyle: attachmentStyle ?? this.attachmentStyle,
      communicationStyle: communicationStyle ?? this.communicationStyle,
      mentalHealthDisclosures: mentalHealthDisclosures ?? this.mentalHealthDisclosures,
      petOwnership: petOwnership ?? this.petOwnership,
      travelFrequencyOrFavoriteDestinations: travelFrequencyOrFavoriteDestinations ?? this.travelFrequencyOrFavoriteDestinations,
      profileVisibilityPreferences: profileVisibilityPreferences ?? this.profileVisibilityPreferences,
      pushNotificationPreferences: pushNotificationPreferences ?? this.pushNotificationPreferences,
      isPhase1Complete: isPhase1Complete ?? this.isPhase1Complete,
      isPhase2Complete: isPhase2Complete ?? this.isPhase2Complete,
      agreedToTerms: agreedToTerms ?? this.agreedToTerms,
      agreedToCommunityGuidelines: agreedToCommunityGuidelines ?? this.agreedToCommunityGuidelines,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      fullName: fullName ?? this.fullName,
      gender: gender ?? this.gender,
      addressZip: addressZip ?? this.addressZip,
      interests: interests ?? this.interests,
      height: height ?? this.height,
    );
  }

  // Factory constructor for creating a UserProfile from a Supabase User object
  factory UserProfile.fromSupabaseUser(User user) {
    return UserProfile(
      userId: user.id, // This correctly assigns the Supabase User's ID to your 'userId' field
      email: user.email ?? 'no-email@example.com',
      createdAt: user.createdAt != null
          ? DateTime.tryParse(user.createdAt!)
          : null,
      updatedAt: user.updatedAt != null
          ? DateTime.tryParse(user.updatedAt!)
          : null,
      isPhase1Complete: false,
      isPhase2Complete: false,
      agreedToTerms: false,
      agreedToCommunityGuidelines: false,
      fullLegalName: null,
      displayName: null,
      profilePictureUrl: null,
      dateOfBirth: null,
      phoneNumber: null,
      locationZipCode: null,
      genderIdentity: null,
      sexualOrientation: null,
      heightCm: null,
      bio: null,
      lookingFor: null,
      hobbiesAndInterests: null,
      languagesSpoken: null,
      loveLanguages: null,
      favoriteMedia: null,
      maritalStatus: null,
      hasChildren: null,
      wantsChildren: null,
      relationshipGoals: null,
      dealbreakers: null,
      religionOrSpiritualBeliefs: null,
      politicalViews: null,
      diet: null,
      smokingHabits: null,
      drinkingHabits: null,
      exerciseFrequencyOrFitnessLevel: null,
      sleepSchedule: null,
      personalityTraits: null,
      questionnaireAnswers: null,
      personalityAssessmentResults: null,
      willingToRelocate: null,
      monogamyVsPolyamoryPreferences: null,
      astrologicalSign: null,
      attachmentStyle: null,
      communicationStyle: null,
      mentalHealthDisclosures: null,
      petOwnership: null,
      travelFrequencyOrFavoriteDestinations: null,
      profileVisibilityPreferences: null,
      pushNotificationPreferences: null,
      fullName: null,
      gender: null,
      addressZip: null,
      interests: null,
      height: null,
      governmentIdFrontUrl: null,
      governmentIdBackUrl: null,
    );
  }
}